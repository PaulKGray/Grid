{"name":"Grid","tagline":"Simple grid for flexible layouts","body":"Grid uses [flexbox](http://caniuse.com/#search=flex) to produce flexible easy to use classes for rows and columns.\r\n\r\n##How to use\r\n###Basic grid\r\n\r\n    .grid {\r\n      display: flex;\r\n    }\r\n    .cell {\r\n      flex: 1;\r\n      box-sizing: border-box;\r\n    }\r\n\r\n####Example\r\n\r\n    <div class=\"grid\">\r\n      <div class=\"cell\">first</div>\r\n      <div class=\"cell\">second</div>\r\n      <div class=\"cell\">third</div>\r\n    </div>\r\n\r\nThis will create a simple flexible row of cells.\r\n\r\n\r\n###Widths\r\n\r\n    .cell-20 {\r\n      flex: 0 0 20%;\r\n    }\r\n\r\n####Example\r\n\r\n    <div class=\"grid\">\r\n      <div class=\"cell cell-20\">first</div>\r\n      <div class=\"cell\">second</div>\r\n      <div class=\"cell\">third</div>\r\n    </div>\r\n\r\nIn this example the first cell is 20% the width of the grid, the other two share the remaining space equally.\r\n\r\n\r\n###Offsets\r\n\r\n    .cell-offset-20 {\r\n      margin-left: 20%;\r\n    }\r\n\r\n####Example\r\n\r\n    <div class=\"grid\">\r\n      <div class=\"cell cell-10\">first</div>\r\n      <div class=\"cell cell-10 cell-offset-80\">second</div>\r\n    </div>\r\n\r\nAdding `cell-offset-20` will add a `margin-left: 20%` to the cell, pushing it right.\r\n\r\n\r\n###Wrapping\r\n\r\n    .grid-wrap {\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n####Example\r\n\r\nHere we have 2 cells, 50% and 66.6666% wide, but the grid is only 100% wide...\r\n\r\n    <div class=\"grid\">\r\n      <div class=\"cell cell-50\">first</div>\r\n      <div class=\"cell cell-66\">second</div>\r\n    </div>\r\n\r\nthis means the cells are now in control and have broken out of their confinment!\r\n\r\n    <div class=\"grid grid-wrap\">\r\n      <div class=\"cell cell-50\">first</div>\r\n      <div class=\"cell cell-66\">second</div>\r\n    </div>\r\n\r\nAdding `grid-wrap` will push the second cell down under the first cell. **Why not just make this default behaviour?** Leaving this option to the developer provides more flexibility.\r\n\r\n\r\n###Vertical alignment\r\n\r\n    /* All cells */\r\n    .grid-top {\r\n      align-items: flex-start;\r\n    }\r\n    .grid-center {\r\n      align-items: center;\r\n    }\r\n    .grid-bottom {\r\n      align-items: flex-end;\r\n    }\r\n\r\n    /* Individual cells */\r\n    .cell-top {\r\n      align-self: flex-start;\r\n    }\r\n    .cell-center {\r\n      align-self: center;\r\n    }\r\n    .cell-bottom {\r\n      align-self: flex-end;\r\n    }\r\n\r\n####Example\r\n\r\n    <div class=\"grid grid-bottom\">\r\n      <div class=\"cell cell-top\">first</div>\r\n      <div class=\"cell cell-center\">second</div>\r\n      <div class=\"cell\">third</div> <!-- grid-bottom pushes this to the bottom -->\r\n      <div class=\"cell\">fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>\r\n      </div>\r\n    </div>\r\n\r\nNotice there are two vertical aligment rules being applied to this grid. A grid wide rule of `grid-bottom` that pushes everything to the bottom, and per cell alignment rules of `cell-top` and `cell-center` that vertically align the cells to the top and center of the grid respectively.\r\n\r\n\r\n###Responsiveness\r\n\r\n    @media (min-width: 24em) and (max-width: 48em) {\r\n      .grid-medium-fit > .cell {\r\n        flex: 1;\r\n      }\r\n      .grid-medium-full > .cell {\r\n        flex: 0 0 100%;\r\n        margin-left: 0;\r\n      }\r\n    }\r\n\r\n####Example\r\n\r\nLet's make this grid thing respond to different screen sizes...\r\n\r\n    <div class=\"grid grid-small-full grid-medium-fit grid-large-full\">\r\n      <div class=\"cell cell-top\">first</div>\r\n      <div class=\"cell cell-center\">second</div>\r\n      <div class=\"cell\">third</div> <!-- grid-bottom pushes this to bottom -->\r\n      <div class=\"cell\">fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>fourth\r\n        <br>\r\n      </div>\r\n    </div>\r\n\r\n- `.grid-small-full` this rule makes the cells full width but only when the screen is small\r\n- `.grid-medium-fit` makes the cells share the space, but only for medium screens\r\n- `.grid-large-full` turns it all into columns again\r\n\r\n\r\n###Utility classes\r\n\r\nThere are some handy \"make visible when small\" and \"hide when large\" rules for you to play with.\r\n\r\n    .visible-small {\r\n      display: none;\r\n    }\r\n    .hidden-medium {\r\n      display: none;\r\n    }\r\n    .hidden-large {\r\n      display: none;\r\n    }\r\n    \r\n\r\n#####Credits\r\nhttp://philipwalton.github.io/solved-by-flexbox/demos/grids/\r\n\r\nhttp://ionicframework.com/docs/components/#grid\r\n\r\nhttp://getbootstrap.com/css/#grid\r\n\r\nhttp://css-tricks.com/snippets/css/a-guide-to-flexbox/\r\n","google":"UA-36978977-2","note":"Don't delete this file! It's used internally to help with page regeneration."}